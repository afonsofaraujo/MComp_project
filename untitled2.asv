















close all; 
clear; 
clc;

FileName = 'dados-escalar.txt';

%% Extract node coordinates from txt
fid = fopen(FileName, 'r');

% Skip the first three lines
for i = 1:2
    fgetl(fid);
end

% Coordenadas dos nos
Nnds = fscanf(fid, '%d', 1);
fgetl(fid);
nodeCoordinates = fscanf(fid, '%d %f %f', [3, Nnds])';
fgetl(fid);
fgetl(fid);

% Matrix de incidencias/conectividades
Nels = fscanf(fid, '%d', 1);
matrixIncidences = fscanf(fid, '%d', [7, Nels])';
fgetl(fid);
fgetl(fid);

% Propriedades/Material
NTM = fscanf(fid, '%d', 1);
fgetl(fid);
if NTECD~=0
    materialProperties = fscanf(fid, '%d %f', [2, NTM])';
else
    materialProperties = [];
end

fgetl(fid);
fgetl(fid);

% Fontes/carregamentos distribuídos
NTECD = fscanf(fid, '%d', 1);
if NTECD~=0
    distributedLoads = fscanf(fid, '%d %f', [2, NTECD])';
else
    distributedLoads = [];
end
fgetl(fid);
fgetl(fid);

% Condição fronteira essencial 
NTGLI = fscanf(fid, '%d', 1);
fgetl(fid);
if NTGLI~=0
    essentialBCs = fscanf(fid, '%d %f', [2, NTGLI])';
else
    essentialBCs = [];
end
fgetl(fid);
fgetl(fid);

% Fontes/cargas pontuais impostas  
NTCPI = fscanf(fid, '%d', 1);
fgetl(fid);
if NTCPI~=0
    pointLoads = fscanf(fid, '%d %f', [2, NTCPI])';
else
    pointLoads = [];
end
fgetl(fid);
fgetl(fid);

% Fluxo imposto na fronteira
NTEFI = fscanf(fid, '%d', 1);
fgetl(fid);
if NTEFI~=0
    imposedFlux = fscanf(fid, '%d %f', [2, NTEFI])';
else
    imposedFlux = [];
end
fgetl(fid);
fgetl(fid);

% CF convecção natural
NTECN = fscanf(fid, '%d', 1);
fgetl(fid);
if NTECN~=0
    conveccaonatural = fscanf(fid, '%d %f', [2, NTECN])';
else
    conveccaonatural = [];
end



fclose(fid);








% Display the extracted data
disp('Node Coordinates:');
disp(nodeCoordinates);

disp('Matrix Incidences:');
disp(matrixIncidences);







% % Open the file for reading
%     fid = fopen(filename, 'r');
% 
%     % Read the number of nodes
%     numNodes = str2double(fgetl(fid));
% 
%     % Read coordinates of nodes
%     nodeCoordinates = fscanf(fid, '%d %f %f', [3, numNodes])';
% 
%     % Read matrix of incidences/conectividades
%     matrixIncidences = fscanf(fid, '%d %d', [7, numNodes])';
% 
%     % Read properties of material
%     materialProperties = fscanf(fid, '%d %f', [2, 1])';
% 
%     % Read distributed sources/loadings
%     numDistributedSources = str2double(fgetl(fid));
%     distributedSources = fscanf(fid, '%d', [1, numDistributedSources]);
% 
%     % Read essential boundary conditions
%     numEssentialBC = str2double(fgetl(fid));
%     essentialBC = fscanf(fid, '%d %f', [2, numEssentialBC])';
% 
%     % Read point loads
%     numPointLoads = str2double(fgetl(fid));
%     pointLoads = fscanf(fid, '%d', [1, numPointLoads]);
% 
%     % Read imposed flux on boundary
%     numImposedFlux = str2double(fgetl(fid));
%     imposedFlux = fscanf(fid, '%d %d %d %f', [4, numImposedFlux])';
% 
%     % Read natural convection convection
%     numNaturalConvection = str2double(fgetl(fid));
%     naturalConvection = fscanf(fid, '%d %d %d %d %d', [5, numNaturalConvection])';
% 
%     % Close the file
%     fclose(fid);
% 
%     % Display or process the read data as needed
%     disp('Node Coordinates:');
%     disp(nodeCoordinates);
% 
%     disp('Matrix of Incidences:');
%     disp(matrixIncidences);
% 
%     disp('Material Properties:');
%     disp(materialProperties);
% 
%     disp('Distributed Sources/Loadings:');
%     disp(distributedSources);
% 
%     disp('Essential Boundary Conditions:');
%     disp(essentialBC);
% 
%     disp('Point Loads:');
%     disp(pointLoads);
% 
%     disp('Imposed Flux on Boundary:');
%     disp(imposedFlux);
% 
%     disp('Natural Convection:');
%     disp(naturalConvection);